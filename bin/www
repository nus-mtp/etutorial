#!/usr/bin/env node

/**
 * Module dependencies.
 */

var fs = require('fs');
var app = require('../app');
var debug = require('debug')('app:server');
//var http = require('http');


/**
 * Read ip configure from using argument "--ip="
 */
if (process.env.npm_config_ip === 'localhost' || process.env.npm_config_ip == undefined) {
	app.set('server-ip', 'localhost');
} else {
	app.set('server-ip', process.env.npm_config_ip);
}

/**
* Start with a configuration file
*/
if (process.env.npm_config_c){
	config = JSON.parse(fs.readFileSync(process.env.npm_config_c, 'utf8'));
	app.set('server-ip', config['server-ip']);
	app.set('express-port', config['express-port']);
}

/**
 * Get port from environment and store in Express.
 */

//var port = normalizePort(process.env.PORT || '3000');
//app.set('port', port);

/**
 * Create HTTP server.
 */

//var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

//server.listen(port);
//server.on('error', onError);
//server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
	case 'EACCES':
		console.error(bind + ' requires elevated privileges');
		process.exit(1);
		break;
	case 'EADDRINUSE':
		console.error(bind + ' is already in use');
		process.exit(1);
		break;
	default:
		throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	var addr = server.address();
	var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
	debug('Listening on ' + bind);
}