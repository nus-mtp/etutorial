<!DOCTYPE html>
<html>
  <head>
    <title><%= title %></title>
    <link rel='stylesheet' href='/stylesheets/style.css' />
    <script type='text/javascript' src='/javascripts/socket.io-1.3.7.js'></script>
    <script type='text/javascript' src='/javascripts/jquery-2.1.4.min.js'></script>
    <script type='text/javascript' src='/javascripts/jquery.ios-shake.js'></script>
    <script type='text/javascript' src='/javascripts/jquery.ui.shake.js'></script>

    <script src='/javascripts/fabric.js'></script>
  </head>
  <style>
    #colorPalette {
        margin-top: 1%
    }

    #circleRed {
        width: 50px;
        height: 50px;
        background: red;
        -webkit-border-radius: 25px;
        -moz-border-radius: 25px;
        border-radius: 25px; 
        display:inline-block
    }

    #circleOrange {
        width: 50px;
        height: 50px;
        background: orange;
        -webkit-border-radius: 25px;
        -moz-border-radius: 25px;
        border-radius: 25px; 
        display:inline-block
    }

    #circleYellow {
        width: 50px;
        height: 50px;
        background: yellow;
        -webkit-border-radius: 25px;
        -moz-border-radius: 25px;
        border-radius: 25px; 
        display:inline-block
    }

    #circleGreen {
        width: 50px;
        height: 50px;
        background: green;
        -webkit-border-radius: 25px;
        -moz-border-radius: 25px;
        border-radius: 25px; 
        display:inline-block
    }

    #circleBlue {
        width: 50px;
        height: 50px;
        background: blue;
        -webkit-border-radius: 25px;
        -moz-border-radius: 25px;
        border-radius: 25px; 
        display:inline-block
    }

    #circlePurple {
        width: 50px;
        height: 50px;
        background: purple;
        -webkit-border-radius: 25px;
        -moz-border-radius: 25px;
        border-radius: 25px; 
        display:inline-block
    }

    #circleGray {
        width: 50px;
        height: 50px;
        background: gray;
        -webkit-border-radius: 25px;
        -moz-border-radius: 25px;
        border-radius: 25px; 
        display:inline-block
    }

    #circleBlack {
        width: 50px;
        height: 50px;
        background: black;
        -webkit-border-radius: 25px;
        -moz-border-radius: 25px;
        border-radius: 25px; 
        display:inline-block
    }
  </style>

  <body>
    <h1><%= title %></h1>

    <script type='text/javascript'>
    	var canvasConnect = io.connect('http://localhost:3000/canvastest');
    </script>

    <canvas id="c" width="700px" height="700px" style="border:1px solid #000000;"></canvas>

    <div id="colorPalette">
        <div id="circleRed" onclick="changeBrushColor('red');" /></div> 
        <div id="circleOrange" onclick="changeBrushColor('orange');" /></div> 
        <div id="circleYellow" onclick="changeBrushColor('yellow');" /></div>
        <div id="circleGreen" onclick="changeBrushColor('green');" /></div>
        <div id="circleBlue" onclick="changeBrushColor('blue');" /></div>
        <div id="circlePurple" onclick="changeBrushColor('purple');" /></div> 
        <div id="circleGray" onclick="changeBrushColor('gray');" /></div>
        <div id="circleBlack" onclick="changeBrushColor('black');" /></div>   
    </div>


    <script type="text/javascript">
    // create a wrapper around native canvas element (with id="c")
    var canvas = new fabric.Canvas('c');

    // create a rectangle object
    var rect = new fabric.Rect({
        left: 100,
        top: 100,
        fill: 'red',
        width: 20,
        height: 20,
        });

    // "add" rectangle onto canvas
    // canvas.add(rect);

    var circle = new fabric.Circle({
        radius: 20, fill: 'green', left: 100, top:100
    });

    var triangle = new fabric.Triangle({
        width: 20, height: 30, fill: "blue", left: 50, top: 50
    });

    var ellipse = new fabric.Ellipse({ 
        fill: "black", left: 150, top: 20, rx: 10, ry: 20
    })

    var line = new fabric.Line([100,100,200,200], { stroke: "yellow", strokeWidth: 3
    })

    var points = [
        {x:10,y:10},
        {x:15,y:15},
        {x:30,y:15},
        {x:40,y:10},
        {x:30,y:0},
        {x:-10,y:-10}
    ];

    var polygon = new fabric.Polygon(points, {
        fill: "Aquamarine", left: 50, top: 120

    })

    var polyline = new fabric.Polyline(points, {
        stroke: "Sienna", strokeWidth: "3", fill: "white", left: 20, top: 150
    })

    rect.set({ left: 20, top: 50 });
    // canvas.add(rect, circle, triangle, ellipse, line, polygon);
    // canvas.add(rect);
    canvas.renderAll();
    canvas.selection = true;
    canvas.isDrawingMode = true;
    canvas.freeDrawingBrush.width = 5;

    canvas.on('object:modified', function(e) {
        canvasConnect.emit('canvasState', JSON.stringify(canvas));
    });

    canvas.on('path:created', function(e) {
        // canvasConnect.emit('canvasState', JSON.stringify(canvas));
        var pathObject = e.path;
        canvasConnect.emit('canvasAction', pathObject);
        // canvas.add(fabric.util.enlivenObjects(JSON.parse(e.path.toJSON())));
        // console.log(e.path);
    });

    canvasConnect.on('canvasState',function(canvasObjects){
        // canvas.loadFromJSON(newCanvas);
        // canvas.renderAll();
        // console.log(action);
        // canvas.add(action);
        // console.log(canvasObjects);
        // var test = [];

        // for (var i = 0; i<canvasObjects.length; ++i) {
        //     test[i]=JSON.parse(canvasObjects[i]);
        // }
        canvas.clear();

        fabric.util.enlivenObjects(canvasObjects, function(objects) {
            var origRenderOnAddRemove = canvas.renderOnAddRemove;
            canvas.renderOnAddRemove = false;

            // objects = JSON.parse(objects);
            objects.forEach(function(o) {
                canvas.add(o);
            });
            canvas.renderOnAddRemove = origRenderOnAddRemove;
            canvas.renderAll();
        });
    });

    canvasConnect.on('canvasAction', function(action) {
        // console.log(action);
        // canvas.add(action);
        var parsedAction = JSON.parse(action);
        console.log(parsedAction.owner);
        fabric.util.enlivenObjects([parsedAction], function(objects) {
            var origRenderOnAddRemove = canvas.renderOnAddRemove;
            canvas.renderOnAddRemove = false;

            objects.forEach(function(o) {
                canvas.add(o);
            });
            canvas.renderOnAddRemove = origRenderOnAddRemove;
            canvas.renderAll();
        });
    });
   
    function KeyPress(e) {
      var evtobj = window.event? event : e
      if (evtobj.keyCode == 90 && evtobj.ctrlKey) {
        alert("Ctrl+z");
        canvasConnect.emit('canvasUndo');
        }
    }

    document.onkeydown = KeyPress;


    //shake to change the brush color to a random color
    $.shake({
        callback: function()
        {
            canvas.freeDrawingBrush.color = getRandomColor();
        }
    });

    function getRandomColor() {
        var letters = '0123456789ABCDEF'.split('');
        var color = '#';
        for (var i = 0; i < 6; i++ ) {
            color += letters[Math.floor(Math.random() * 16)];
        }
        return color;
    }

    function changeBrushColor(color)
    {
        canvas.freeDrawingBrush.color = color;
    }

</script>
  </body>
</html>