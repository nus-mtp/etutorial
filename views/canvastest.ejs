<!DOCTYPE html>
<html>
  <head>
    <title><%= title %></title>
    <link href='https://fonts.googleapis.com/css?family=Roboto:400,100,300,100italic,300italic,400italic,500,500italic' rel='stylesheet' type='text/css'>
    <link href='https://fonts.googleapis.com/css?family=Indie+Flower' rel='stylesheet' type='text/css'>
    <link rel='stylesheet' href='/stylesheets/style.css' />
    <script type='text/javascript' src='/javascripts/socket.io-1.3.7.js'></script>
    <script type='text/javascript' src='/javascripts/jquery-2.1.4.min.js'></script>
    <script type='text/javascript' src='/javascripts/jquery.ios-shake.js'></script>
    <script type='text/javascript' src='/javascripts/jquery.ui.shake.js'></script>

    <script src='/javascripts/fabric.js'></script>
  </head>
  <style>
    #colorPalette {
        margin-top: 1%
    }

    #circleRed {
        width: 50px;
        height: 50px;
        background: red;
        -webkit-border-radius: 25px;
        -moz-border-radius: 25px;
        border-radius: 25px; 
        display:inline-block
    }

    #circleOrange {
        width: 50px;
        height: 50px;
        background: orange;
        -webkit-border-radius: 25px;
        -moz-border-radius: 25px;
        border-radius: 25px; 
        display:inline-block
    }

    #circleYellow {
        width: 50px;
        height: 50px;
        background: yellow;
        -webkit-border-radius: 25px;
        -moz-border-radius: 25px;
        border-radius: 25px; 
        display:inline-block
    }

    #circleGreen {
        width: 50px;
        height: 50px;
        background: green;
        -webkit-border-radius: 25px;
        -moz-border-radius: 25px;
        border-radius: 25px; 
        display:inline-block
    }

    #circleBlue {
        width: 50px;
        height: 50px;
        background: blue;
        -webkit-border-radius: 25px;
        -moz-border-radius: 25px;
        border-radius: 25px; 
        display:inline-block
    }

    #circlePurple {
        width: 50px;
        height: 50px;
        background: purple;
        -webkit-border-radius: 25px;
        -moz-border-radius: 25px;
        border-radius: 25px; 
        display:inline-block
    }

    #circleGray {
        width: 50px;
        height: 50px;
        background: gray;
        -webkit-border-radius: 25px;
        -moz-border-radius: 25px;
        border-radius: 25px; 
        display:inline-block
    }

    #circleBlack {
        width: 50px;
        height: 50px;
        background: black;
        -webkit-border-radius: 25px;
        -moz-border-radius: 25px;
        border-radius: 25px; 
        display:inline-block
    }

    .plalette-color {
        cursor: pointer;
        margin-bottom: 6px;
    }

    .plalette-color.selected {
        border: 1px solid white;
    }

    body {
        font-family: 'Roboto', sans-serif;
        background: #4e4c4c;
        color: white;
    }

    #c {
        width: 700px;
        border-radius: 5px;
        margin: auto;
    }

    .canvas-container {
        float: left;
    }

    #color-picker-button {
        display: none;
        width: 100%;
        height: 100px;
        background-color: white;
        border: 1px solid white;
        border-radius: 3px;
    }

    #color-picker-button:hover {
        border: 1px solid yellow;
        cursor: pointer;
    }

    #toolbar {
        position: relative;
        text-align: center;
        float: left;
        width: 100px;
        height: 500px;
        background: linear-gradient(to right, #1c1c1c , #262626); 
        padding: 2px;
        border-radius: 3px;
        padding: 4px;
        /*border: 3px outset #4B6DCC;*/
    }

    .tool-label {
        font-size: 1em;
        margin: 0 0 4px 0;
        font-weight: 100;
    }

    #canvas_picker {
        position: relative;
        top: 0;
        left: 0;
        z-index: 1001;
    }

    #color-picker-wrapper {
        display: inline;
        border-radius: 3px;
        border-top-left-radius: 0px;
        border-bottom-left-radius: 0px;

        padding: 6px;
        position: absolute;
        background-color: #262626;
        z-index: 1;
        left:100%;
    }

    #color-picker-button:hover #color-picker-wrapper{
        display: inline !important;
    }

    h1 {
        font-family: 'Indie Flower', cursive;
        margin: 0 0 5px 5px;
    }

  </style>

  <body>
    <h1>Collaborative Whiteboard</h1>

    <script type='text/javascript'>
    	var canvasConnect = io.connect('http://172.17.31.213:3000/canvastest');
    </script>

    <div class="whiteboard-wrapper">
        <div id="toolbar">
        <h3 class="tool-label">Brush Colour</h3>
            <div id="colorPalette">
                <div class="plalette-color" id="circleRed" onclick="changeBrushColor('red');" /></div> 
                <div class="plalette-color" id="circleOrange" onclick="changeBrushColor('orange');" /></div> 
                <div class="plalette-color" id="circleYellow" onclick="changeBrushColor('yellow');" /></div>
                <div class="plalette-color" id="circleGreen" onclick="changeBrushColor('green');" /></div>
                <div class="plalette-color" id="circleBlue" onclick="changeBrushColor('blue');" /></div>
                <div class="plalette-color" id="circlePurple" onclick="changeBrushColor('purple');" /></div> 
                <div class="plalette-color" id="circleGray" onclick="changeBrushColor('gray');" /></div>
                <div class="plalette-color selected" id="circleBlack" onclick="changeBrushColor('black');" /></div>   
            </div>
            <div id="color-picker-button">
                <div id="color-picker-wrapper">
                    <canvas width="200" height="200" id="canvas_picker"></canvas>
                </div>
            </div>
        </div>
        <canvas id="c" width="700px" height="700px"></canvas>
    </div>
    
    <script type="text/javascript">
    var colorCanvas = document.getElementById('canvas_picker').getContext('2d');

    var img = new Image();
    img.src = '/images/ColorWheel-Base.png';
    $(img).load(function(){
        var colorCanvasElement = $('#canvas_picker');
        var hRatio = colorCanvasElement.width() / img.width;
        var vRatio = colorCanvasElement.height() / img.height;
        var ratio  = Math.min ( hRatio, vRatio );

        colorCanvas.drawImage(img, 0,0, img.width, img.height, 0,0,img.width*ratio, img.height*ratio);
        $("#color-picker-wrapper").hide();
    });

    function rgbToHex(R,G,B) {return toHex(R)+toHex(G)+toHex(B)}
    function toHex(n) {
      n = parseInt(n,10);
      if (isNaN(n)) return "00";
      n = Math.max(0,Math.min(n,255));
      return "0123456789ABCDEF".charAt((n-n%16)/16)  + "0123456789ABCDEF".charAt(n%16);
    }

    $('#color-picker-wrapper').click(function() {
    });
    $('#canvas_picker').click(function(event){
      // getting user coordinates
      var x = event.pageX - this.getBoundingClientRect().left;
      var y = event.pageY - this.getBoundingClientRect().top;
      // getting image data and RGB values
      var img_data = colorCanvas.getImageData(x, y, 1, 1).data;
      var R = img_data[0];
      var G = img_data[1];
      var B = img_data[2];  
      var rgb = R + ',' + G + ',' + B;
      // convert RGB to HEX
      var hex = rgbToHex(R,G,B);
      // making the color the value of the input
      // $('#rgb input').val(rgb);
      // $('#hex input').val('#' + hex);
      // alert(hex);
      // alert(hex);
      changeBrushColor("#"+hex);
      $('#color-picker-button').css("background-color", "#"+hex);
    });

    $('.plalette-color').click(function() {
        var parentContainer = $(this).parent();
        parentContainer.find('.selected').each(function() {
            $(this).removeClass('selected');
        });

        $(this).addClass('selected');
    });
    // create a wrapper around native canvas element (with id="c")
    var canvas = new fabric.Canvas('c');
    canvas.backgroundColor="white";

    // create a rectangle object
    var rect = new fabric.Rect({
        left: 100,
        top: 100,
        fill: 'red',
        width: 20,
        height: 20,
        });

    // "add" rectangle onto canvas
    // canvas.add(rect);

    var circle = new fabric.Circle({
        radius: 20, fill: 'green', left: 100, top:100
    });

    var triangle = new fabric.Triangle({
        width: 20, height: 30, fill: "blue", left: 50, top: 50
    });

    var ellipse = new fabric.Ellipse({ 
        fill: "black", left: 150, top: 20, rx: 10, ry: 20
    })

    var line = new fabric.Line([100,100,200,200], { stroke: "yellow", strokeWidth: 3
    })

    var points = [
        {x:10,y:10},
        {x:15,y:15},
        {x:30,y:15},
        {x:40,y:10},
        {x:30,y:0},
        {x:-10,y:-10}
    ];

    var polygon = new fabric.Polygon(points, {
        fill: "Aquamarine", left: 50, top: 120

    })

    var polyline = new fabric.Polyline(points, {
        stroke: "Sienna", strokeWidth: "3", fill: "white", left: 20, top: 150
    })

    rect.set({ left: 20, top: 50 });
    // canvas.add(rect, circle, triangle, ellipse, line, polygon);
    // canvas.add(rect);
    canvas.renderAll();
    canvas.selection = true;
    canvas.isDrawingMode = true;
    canvas.freeDrawingBrush.width = 5;

    canvas.on('object:modified', function(e) {
        canvasConnect.emit('canvasState', JSON.stringify(canvas));
    });

    canvas.on('path:created', function(e) {
        // canvasConnect.emit('canvasState', JSON.stringify(canvas));
        var pathObject = e.path;
        canvasConnect.emit('canvasAction', pathObject);
        // canvas.add(fabric.util.enlivenObjects(JSON.parse(e.path.toJSON())));
        // console.log(e.path);
    });

    canvasConnect.on('canvasState',function(canvasObjects){
        // canvas.loadFromJSON(newCanvas);
        // canvas.renderAll();
        // console.log(action);
        // canvas.add(action);
        // console.log(canvasObjects);
        // var test = [];

        // for (var i = 0; i<canvasObjects.length; ++i) {
        //     test[i]=JSON.parse(canvasObjects[i]);
        // }
        canvas.clear();

        fabric.util.enlivenObjects(canvasObjects, function(objects) {
            var origRenderOnAddRemove = canvas.renderOnAddRemove;
            canvas.renderOnAddRemove = false;

            // objects = JSON.parse(objects);
            objects.forEach(function(o) {
                canvas.add(o);
            });
            canvas.renderOnAddRemove = origRenderOnAddRemove;
            canvas.renderAll();
        });
    });

    canvasConnect.on('canvasAction', function(action) {
        // console.log(action);
        // canvas.add(action);
        var parsedAction = JSON.parse(action);
        console.log(parsedAction.owner);
        fabric.util.enlivenObjects([parsedAction], function(objects) {
            var origRenderOnAddRemove = canvas.renderOnAddRemove;
            canvas.renderOnAddRemove = false;

            objects.forEach(function(o) {
                canvas.add(o);
            });
            canvas.renderOnAddRemove = origRenderOnAddRemove;
            canvas.renderAll();
        });
    });
   
    function KeyPress(e) {
      var evtobj = window.event? event : e
      if (evtobj.keyCode == 90 && evtobj.ctrlKey) {
        alert("Ctrl+z");
        canvasConnect.emit('canvasUndo');
        }
    }

    document.onkeydown = KeyPress;


    //shake to change the brush color to a random color
    $.shake({
        callback: function()
        {
            canvas.freeDrawingBrush.color = getRandomColor();
        }
    });

    function getRandomColor() {
        var letters = '0123456789ABCDEF'.split('');
        var color = '#';
        for (var i = 0; i < 6; i++ ) {
            color += letters[Math.floor(Math.random() * 16)];
        }
        return color;
    }

    function changeBrushColor(color)
    {
        canvas.freeDrawingBrush.color = color;
    }

</script>
  </body>
</html>